SET ThousandSep=' ';
SET DecimalSep=',';
SET MoneyThousandSep=' ';
SET MoneyDecimalSep=',';
SET MoneyFormat='# ##0,00 kr;-# ##0,00 kr';
SET TimeFormat='hh:mm:ss';
SET DateFormat='YYYY-MM-DD';
SET TimestampFormat='YYYY-MM-DD hh:mm:ss[.fff]';
SET FirstWeekDay=0;
SET BrokenWeeks=0;
SET ReferenceDay=4;
SET FirstMonthOfYear=1;
SET CollationLocale='sv-SE';
SET CreateSearchIndexOnReload=1;
SET MonthNames='jan.;feb.;mars;apr.;maj;juni;juli;aug.;sep.;okt.;nov.;dec.';
SET LongMonthNames='januari;februari;mars;april;maj;juni;juli;augusti;september;oktober;november;december';
SET DayNames='mån;tis;ons;tors;fre;lör;sön';
SET LongDayNames='måndag;tisdag;onsdag;torsdag;fredag;lördag;söndag';
SET NumericalAbbreviation='3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:μ;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y';

Characters:
Load Chr(RecNo()+Ord('A')-1) as Alpha, RecNo() as Num autogenerate 26;
 
ASCII:
Load 
 if(RecNo()>=65 and RecNo()<=90,RecNo()-64) as Num,
 Chr(RecNo()) as AsciiAlpha, 
 RecNo() as AsciiNum
autogenerate 255
 Where (RecNo()>=32 and RecNo()<=126) or RecNo()>=160 ;
 
Transactions:
Load
 TransLineID, 
 Key,
 mod(Key,26)+1 as Num,
 Pick(Ceil(3*Rand1),'A','B','C') as Secret1,
 Pick(Ceil(6*Rand1),'a','b','c','d','e','f') as Data1,
 Pick(Ceil(3*Rand()),'X','Y','Z') as Data2,
 Round(1000*Rand()*Rand()*Rand1) as Expression1,
 Round(  10*Rand()*Rand()*Rand1) as Expression2,
 Round(Rand()*Rand1,0.00001) as Expression3,
 Round(9*Rand())&Round(9*Rand())&Round(9*Rand())&Round(9*Rand())&Round(9*Rand())&Round(9*Rand()) as CardNbr;
Load 
 Rand() as Rand1,
 IterNo() as TransLineID,
 RecNo() as Key
Autogenerate 1000;
 
 //AES test
 TimeLog:
    LOAD Now() as LogTime, 'AESEnc' as LogStatus AUTOGENERATE(1);

 AESTransactionsSSE:
 Load 
 Key,
 secSSE.HelloWorld(Data1) as HW,
 secSSE.AESEncryptData(Secret1,'') as AESEncSecret1
 resident Transactions;
 
TimeLog:
    LOAD Now() as LogTime, 'AESEnc' as LogStatus AUTOGENERATE(1);
 
TimeLog:
    LOAD Now() as LogTime, 'AESDec' as LogStatus AUTOGENERATE(1);

 AESTransactionSSEDecrypt:
 Load
 Key,
 secSSE.AESDecryptData(AESEncSecret1,'') as AESSecret1Decrypted
 resident AESTransactionsSSE;

  TimeLog:
    LOAD Now() as LogTime, 'AESDec' as LogStatus AUTOGENERATE(1);

 
 //FPE

TimeLog:
    LOAD Now() as LogTime, 'FPEEnc' as LogStatus AUTOGENERATE(1);

 FPETransactionsSSE:
 Load 
 Key,
 CardNbr as FPECardNbr,
 secSSE.FPEEncryptData(CardNbr, '') as FPEEncCardNbr
 resident Transactions;
 
 TimeLog:
    LOAD Now() as LogTime, 'FPEEnc' as LogStatus AUTOGENERATE(1);

 TimeLog:
    LOAD Now() as LogTime, 'FPEDec' as LogStatus AUTOGENERATE(1);

 
 FPETransactionSSEDecrypt:
 Load
 Key,
 secSSE.FPEDecryptData(FPEEncCardNbr, '') as FPECardNbrDecrypted
 resident FPETransactionsSSE;

 TimeLog:
    LOAD Now() as LogTime, 'FPEDec' as LogStatus AUTOGENERATE(1);

 
 //Multi-row test AES test
 TimeLog:
    LOAD Now() as LogTime, 'AESEncMulti' as LogStatus AUTOGENERATE(1);

 AESMultirowTransactionSSE:
 Load
 Field1 as SSEMSecret1Enc, 
 Field2 as Key
 Extension secSSE.AESEncryptData(Transactions{Secret1, Key});

TimeLog:
    LOAD Now() as LogTime, 'AESEncMulti' as LogStatus AUTOGENERATE(1);

TimeLog:
    LOAD Now() as LogTime, 'AESDecMulti' as LogStatus AUTOGENERATE(1);

 AESMultirowTransactionSSEDecrypt:
 Load
 Field1 as SSEMSecret1Decrypted,
 Field2 as Key
 Extension secSSE.AESDecryptData(AESMultirowTransactionSSE{SSEMSecret1Enc, Key});

TimeLog:
    LOAD Now() as LogTime, 'AESDecMulti' as LogStatus AUTOGENERATE(1);

 
 //Multi-row test FPE
TimeLog:
    LOAD Now() as LogTime, 'FPEEncMulti' as LogStatus AUTOGENERATE(1);


 FPEMultirowTransactionSSE:
 Load
 Field1 as SSEMFPECardNbr, 
 Field2 as Key
 Extension secSSE.FPEEncryptData(Transactions{CardNbr, Key});

 TimeLog:
    LOAD Now() as LogTime, 'FPEEncMulti' as LogStatus AUTOGENERATE(1);


TimeLog:
    LOAD Now() as LogTime, 'FPEDecMulti' as LogStatus AUTOGENERATE(1);


 FPEMultirowTransactionSSEDecrypt:
 Load 
 Field1 as SSEMFPECardNbrDecrypted, 
 Field2 as Key
 Extension secSSE.FPEDecryptData(FPEMultirowTransactionSSE{SSEMFPECardNbr, Key});
 
 TimeLog:
    LOAD Now() as LogTime, 'FPEDecMulti' as LogStatus AUTOGENERATE(1);


TimelogOrg:
Load
RecNo() as id,
if(Previous(LogStatus)=LogStatus,LogTime-Previous(LogTime),0) as ExecutionTime,
LogStatus
resident TimeLog;

Drop table TimeLog; 

TimeLog:
Load 
ExecutionTime,
LogStatus
resident TimelogOrg where ExecutionTime >0 ;

Drop table TimelogOrg;
